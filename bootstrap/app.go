package bootstrap

import (
	"fmt"
	"log"

	"github.com/zatrano/zatrano/config"
	"github.com/zatrano/zatrano/internal/zatrano/kernel"
	"github.com/zatrano/zatrano/internal/zatrano/module"
	"github.com/zatrano/zatrano/internal/zatrano/view"
	
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/csrf"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/fiber/v2/middleware/session"
	"github.com/joho/godotenv"
)

// Application, ZATRANO uygulamasÄ±nÄ±n tÃ¼m bileÅŸenlerini ve yaÅŸam dÃ¶ngÃ¼sÃ¼nÃ¼ yÃ¶netir.
type Application struct {
	Fiber     *fiber.App
	Kernel    kernel.IKernel
	providers []module.Provider
}

// New, yeni bir ZATRANO uygulamasÄ± Ã¶rneÄŸi oluÅŸturur ve temel yapÄ±landÄ±rmayÄ± yapar.
func New() *Application {
	if err := godotenv.Load(); err != nil {
		log.Println("Warning: .env file not found. Using default or environment variables.")
	}

	appKernel := kernel.New()
	
	engine := view.NewEngine()
	fiberApp := fiber.New(fiber.Config{
		Views:     engine,
		AppName:   config.Get("APP_NAME", "Zatrano"),
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			code := fiber.StatusInternalServerError
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
			}
			// Hata sayfalarÄ±nÄ± daha sonra oluÅŸturacaÄŸÄ±z.
			return c.Status(code).SendString(fmt.Sprintf("Error %d: %s", code, err.Error()))
		},
	})

	return &Application{
		Fiber:     fiberApp,
		Kernel:    appKernel,
		providers: make([]module.Provider, 0),
	}
}

// AddProviders, uygulamaya bir veya daha fazla servis saÄŸlayÄ±cÄ± (modÃ¼l) ekler.
func (app *Application) AddProviders(providers []module.Provider) {
	app.providers = append(app.providers, providers...)
}

// GetProviders, eklenmiÅŸ saÄŸlayÄ±cÄ±larÄ±n bir kopyasÄ±nÄ± dÃ¶ndÃ¼rÃ¼r.
// Bu, main.go'nun seeder gibi Ã¶zel durumlar iÃ§in dÃ¶ngÃ¼leri ayÄ±rmasÄ±na olanak tanÄ±r.
func (app *Application) GetProviders() []module.Provider {
	return app.providers
}

// RegisterProviders, tÃ¼m saÄŸlayÄ±cÄ±larÄ±n Register metodunu Ã§alÄ±ÅŸtÄ±rÄ±r.
func (app *Application) RegisterProviders() {
	for _, provider := range app.providers {
		provider.Register(app.Kernel)
	}
}

// Boot, uygulamanÄ±n Ã§ekirdek servislerini ve saÄŸlayÄ±cÄ±larÄ±nÄ± baÅŸlatÄ±r.
// Bu metod, seeder'lar iÃ§in gerekli deÄŸildir, bu yÃ¼zden ayrÄ±lmÄ±ÅŸtÄ±r.
func (app *Application) Boot() {
	// 1. Framework'Ã¼n Ã§ekirdek servislerini ve middleware'lerini kur.
	app.bootCoreServices()
	
	// 2. TÃ¼m saÄŸlayÄ±cÄ±larÄ±n `Boot` metodlarÄ±nÄ± Ã§alÄ±ÅŸtÄ±r.
	for _, provider := range app.providers {
		provider.Boot(app.Kernel, app.Fiber)
	}
}

// Run, web sunucusunu baÅŸlatÄ±r.
// Bu metod, seeder modunda Ã§aÄŸrÄ±lmaz.
func (app *Application) Run() {
	// Statik dosyalar iÃ§in public klasÃ¶rÃ¼nÃ¼ ayarla.
	app.Fiber.Static("/", "./public")

	// HiÃ§bir rota eÅŸleÅŸmezse 404 Not Found hatasÄ± dÃ¶ndÃ¼ren bir middleware ekle.
	app.Fiber.Use(func(c *fiber.Ctx) error {
		return c.SendStatus(fiber.StatusNotFound)
	})
	
	// Web sunucusunu dinlemeye baÅŸla.
	port := config.Get("APP_PORT", "3000")
	log.Printf("ğŸš€ Zatrano server is running on port %s", port)
	log.Printf("   Press CTRL+C to stop")
	log.Fatal(app.Fiber.Listen(":" + port))
}


// bootCoreServices, framework'Ã¼n kendisi iÃ§in gerekli olan temel servisleri
// ve middleware'leri kaydeder ve baÅŸlatÄ±r.
func (app *Application) bootCoreServices() {
	app.Fiber.Use(recover.New())
	
	if config.Get("APP_ENV") == "development" {
		app.Fiber.Use(logger.New())
	}

	sessionStore := session.New()
	
	app.Kernel.RegisterSingleton("session.store", func(k kernel.IKernel) (interface{}, error) {
		return sessionStore, nil
	})
	
	app.Fiber.Use(sessionStore)
	app.Fiber.Use(func(c *fiber.Ctx) error {
		c.Locals("session_store", sessionStore)
		return c.Next()
	})

	app.Fiber.Use(csrf.New(csrf.Config{
		Session:    sessionStore,
		ContextKey: "csrf",
	}))

	app.Fiber.Use(func(c *fiber.Ctx) error {
		// Bu, AuditingPlugin'in o anki isteÄŸin context'ine eriÅŸmesini saÄŸlar.
		app.Kernel.Register("http.context", func(k kernel.IKernel) (interface{}, error) {
			return c, nil
		})
		return c.Next()
	})
}